@page "/PlaceOrder"
@using WebClient.Models
@using WebClient.Data
@using System.Linq
@inject IMenusService MenusService;
@inject IMenuItemsService MenuItemsWebService;
@inject IMenuItemsSelectionsService MenuItemsSelectionsService
@inject IOrderService OrderService;
@inject NavigationManager NavigationManager;
@inject IAccountService AccountService
@inject NotificationService NotificationService

<div class="text-center">
    <h3>TakeAway</h3>
    <AuthorizeView Policy="Customer">
        <Authorized>
            <h3>Hello @context.User.Identity.Name</h3>
            @{ customerEmail = context.User.Claims.First(claim => claim.Type.Equals("Email")).Value; }
            <p>Number of orders: @numberOfOrders</p>
            <div class="d-flex justify-content-center align-items-center">
                <RadzenCard Style="margin-bottom: 2%; height:15%;">
                    <b>Current Order Price: @String.Format(new System.Globalization.CultureInfo("da-DK"), "{0:C}", price)</b>
                </RadzenCard>
            </div>
            <p>Receive a 10% discount for orders worth more than @String.Format(new System.Globalization.CultureInfo("da-DK"), "{0:C}", 1000)</p>
            @if (menus == null)
            {
                <p>No menus to show.</p>
            }
            else if (!menus.Any())
            {
                <button class="btn btn-primary" type="button" disabled>
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    Loading...
                </button>
            }
            else
            {
                if (numberOfOrders != 0 && numberOfOrders % 10 == 0)
                {
                    <p>You have accummulated 10 orders! You will get a 50% discount on this order.</p>
                }

                @foreach (var menu in menus)
                {
                    <RadzenCard Style="margin-bottom: 2%; height:15%;">
                        <div class="row">
                            <div class="col-md-6">
                                <b>@menu.Name</b>
                                <div style="margin-top:1%">Menu Items:</div>
                                @foreach (var selection in menu.MenusItemsSelections)
                                {
                                    <p>@selection.MenuItem.Name x @selection.Quantity</p>
                                }
                                <br/>
                                <b>Description</b>
                                <p style="margin-top:1%">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. </p>
                            </div>
                            <div class="col-md-6">
                                <div>Type:</div>
                                <b>@menu.Type</b>
                                <div style="margin-top:1%">Price:</div>
                                <b>@String.Format(new System.Globalization.CultureInfo("da-DK"), "{0:C}", menu.Price)</b>
                                <div style="margin-top:1%">Quantity: </div>
                                <RadzenNumeric Style="width: 25%" TValue="int" Min="0" Change=@(args => OnSelectQuantity(args))></RadzenNumeric>
                                <br/>

                                <RadzenButton Text="Add to Order" Style="margin-top:1%; width: 200px"
                                              ButtonStyle="ButtonStyle.Info"
                                              Click=@(args => ShowNotification(new NotificationMessage {Severity = NotificationSeverity.Info, Summary = "Added to the order", Duration = 4000}, menu))>
                                </RadzenButton>

                            </div>
                        </div>
                    </RadzenCard>
                }
                <div class="d-flex justify-content-center align-items-center">
                    <RadzenCard Style="margin-bottom: 2%; height:15%;">
                        <b>Current Order Price: @String.Format(new System.Globalization.CultureInfo("da-DK"), "{0:C}", price)</b>
                    </RadzenCard>
                </div>
                <div class="d-flex justify-content-center align-items-center">
                    @if (!orderItems.Any())
                    {
                        <table class="table w-50">
                            <thead>
                            <th>Menu Name</th>
                            <th>Quantity</th>
                            </thead>
                        </table>
                    }
                    else
                    {
                        <table class="table w-50">
                            <thead>
                            <tr>
                                <th>Menu Name</th>
                                <th>Quantity</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var item in orderItems)
                            {
                                <tr>
                                    <td>@item.Menu.Name</td>
                                    <td>@item.Quantity</td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    }
                </div>
                <div class="text-center">
                    <button class="btn btn-outline-dark" style="margin-top: 2%; margin-bottom: 2%" @onclick="Clear">Clear Order</button>
                </div>
                @if (price > 1000)
                {
                    <p>You will receive a 10% discount for this order.</p>
                }
                if (numberOfOrders != 0 && numberOfOrders % 10 == 0)
                {
                    <p>You have accummulated 10 orders! You will get a 50% discount on this order.</p>
                }
                <div class="text-center">
                    <div style="color:red">@errorMessage</div>
                    <button class="btn btn-success" style="margin-top: 2%; margin-bottom: 5%" @onclick="Next">Proceed to Payment</button>
                </div>
            }
        </Authorized>
    </AuthorizeView>
</div>


@code {
    private IList<Menu> menus = new List<Menu>();
    private IList<long> selectedMenusIds = new List<long>();
    private IList<OrderItem> orderItems = new List<OrderItem>();
    private Order order;
    private int quantity;
    private decimal price;
    private string customerEmail;
    private string errorMessage;
    private int numberOfOrders;

    protected override async Task OnInitializedAsync()
    {
        order = new Order
        {
        };
        menus = await MenusService.GetMenusAsync();

        foreach (var m in menus)
        {
            m.MenusItemsSelections = await MenuItemsSelectionsService.GetMenuItemsSelectionsAsync(m.MenuId);
        }

        numberOfOrders = await OrderService.GetCustomerOrdersAsync(customerEmail);
    }


    private void OnSelectQuantity(dynamic value)
    {
        quantity = value;
    }

    private void ShowNotification(NotificationMessage message, Menu menu)
    {
        AddOrderItem(menu);
        NotificationService.Notify(message);
    }

    private void AddOrderItem(Menu menu)
    {
        if (!selectedMenusIds.Contains(menu.MenuId))
        {
            OrderItem orderItem = new OrderItem
            {
                MenuId = menu.MenuId,
                Menu = menu,
                Quantity = quantity
            };
            price += orderItem.Menu.Price * orderItem.Quantity;
            orderItems.Add(orderItem);
            order.OrderItems = orderItems;
            selectedMenusIds.Add(menu.MenuId);
        }
        else
        {
            OrderItem item = order.OrderItems.First(item => item.MenuId == menu.MenuId);
            price -= item.Quantity * menu.Price;
            price += quantity * menu.Price;
            order.OrderItems.Remove(item);
            item.Quantity = quantity;
            order.OrderItems.Add(item);
        }
    }

    private void Clear()
    {
        orderItems = new List<OrderItem>();
    }

    private async Task Next()
    {
        if (order.OrderItems.Any())
        {
            errorMessage = "";
            try
            {
                order.Customer = new Customer {Email = customerEmail};
                order.OrderDateTime = DateTime.Now;
                order.Price = price;
                order.Status = "ordering";
                order.IsDelivery = true;
                order = await OrderService.CreateOrderAsync(order);
                NavigationManager.NavigateTo($"/OrderInformation/{order.OrderId}");
            }
            catch (Exception e)
            {
                errorMessage = e.Message;
            }
        }
        else
        {
            NotificationService.Notify(new NotificationMessage {Severity = NotificationSeverity.Error, Summary = "No Menus Selected", Duration = 4000});
        }
    }


}