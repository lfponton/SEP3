@page "/OrderConfirmation/{OrderId:long}"
@using MatBlazor
@using WebClient.Data
@using WebClient.Models
@using System.Threading
@inject IOrderService OrderService
@inject NavigationManager NavigationManager

<div class="text-center">
<h3>Order Confirmation</h3>

@if (order == null || order.Status.Equals("pending"))
{
    <button class="btn btn-primary" type="button" disabled>
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        Waiting for Order Confirmation...
    </button>
}
else if (status.Equals("confirmed"))
{
    <p>Your order has been confirmed!</p>
    if (order.IsDelivery)
    {
        <p>You can expect to receive your order at: @order.DeliveryTime.TimeOfDay</p>
    }
    else
    {
        <p>Your order will be available for pick up at: @order.DeliveryTime.TimeOfDay</p>
    }
}
</div>


@code {
    
    [Parameter]
    public long OrderId { get; set; }

    private Order order;
    private OrderItem orderItems;
    private string Name;
    private decimal Price;
    private int Quantity;
    private Order Total;
    MatProgressBar progressBar;
    
    bool checked1 = true;
    private string status;
    
    protected override async Task OnInitializedAsync()
    {
        order = await OrderService.GetOrderAsync(OrderId);
        status = order.Status;
        await StartTimer();
    }

    private async Task StartTimer()
    {
        var timer = new Timer(new TimerCallback(async _ =>
        {
            order = await OrderService.GetOrderAsync(OrderId);
            status = order.Status;
            if (status.Equals("confirmed"))
            {
                await InvokeAsync(StateHasChanged);
            }
        }), null, 5000, 5000);
    }
    
}
        