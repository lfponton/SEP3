@page "/ViewOrder/{Id:long}"
@inject NavigationManager NavigationManager
@inject IOrderService OrderService
@inject IMenuItemsSelectionsService MenuItemsSelectionsService
@using WebClient.Models
@using WebClient.Data
<div class="text-center">
    <!-- We could use cards here to display info -->
    <h3 style="margin-bottom: 5%">Order @Id</h3>
    <p>Order Type: @orderType </p>
    @if (order == null)
    {
        <p>
            <em>Loading order</em>
        </p>
    }
    else
    {
        @if (order.Customer != null)
        {
            <p>Customer Name: @order.Customer.FirstName</p>
        }
        else
        {
            <p>No customer available</p>
        }
        <p>Date and Time of Order: @order.OrderDateTime</p>
        <p>Status: @order.Status</p>
        <p>Menus</p>
        @if (order.OrderItems != null)
        {
            @foreach (var orderItem in order.OrderItems)
            {
                <p>Menu Name: @orderItem.Menu.Name</p>
                <p>Quantity: @orderItem.Quantity</p>
                <p>MenuItems:</p>
                foreach (var selection in orderItem.Menu.MenusItemsSelections)
                {
                    if (selection != null)
                    {
                        <p>MenuItem Name: @selection.MenuItem.Name</p>
                        <p>Quantity: @selection.Quantity</p>
                    }
                }
            }
        }
        else
        {
            <p>The selected order has no ordered items</p>
        }
        @if (order.IsDelivery)
        {
            <p>Delivery Address: </p>
            <p>@order.DeliveryAddress.ToString()</p>
        }
        @if (order.Status == "pending")
        {
            <!-- Needs input validation -->
            <p>Delivery Time</p>
            <RadzenDatePicker TValue="DateTime?" ShowTime="true" TimeOnly="true" DateFormat="HH:mm" Change=@(args => OnChange(args))>
            </RadzenDatePicker>
        }

        <div>
            @if (order.Status == "pending")
            {
                <button class="btn btn-outline-dark" style="margin-top: 5%; margin-bottom: 5%" @onclick="ConfirmOrder">Confirm</button>
            }
            <button class="btn btn-outline-dark" style="margin-top: 5%; margin-bottom: 5%" @onclick="CancelOrder">Cancel</button>
            <button class="btn btn-outline-dark" style="margin-top: 5%; margin-bottom: 5%" @onclick="Back">Back</button>
        </div>
    }

</div>

@code {

    [Parameter]
    public long Id { get; set; }

    private Order order;
    private string orderType;
    private IList<MenuItemsSelection> menuItemsSelections;

    protected override async Task OnInitializedAsync()
    {
        order = await OrderService.GetOrderAsync(Id);
        orderType = order.IsDelivery ? "Delivery" : "Pick Up";
        if (order.OrderItems != null)
        {
            foreach (var orderItem in order.OrderItems)
            {
                orderItem.Menu.MenusItemsSelections = await MenuItemsSelectionsService.GetMenuItemsSelectionsAsync(orderItem.Menu.MenuId);
            }
        }
    }

    void OnChange(DateTime? value)
    {
        if (value != null)
        {
            order.DeliveryTime = (DateTime) value;
        }
    }

    private async Task ConfirmOrder()
    {
        order.Status = "confirmed";
        await OrderService.UpdateOrderAsync(order);
        NavigationManager.NavigateTo("PendingOrders");
    }

    private async void CancelOrder()
    {
        order.Status = "cancelled";
        await OrderService.UpdateOrderAsync(order);
        NavigationManager.NavigateTo("PendingOrders");
    }

    private void Back()
    {
        NavigationManager.NavigateTo("PendingOrders");
    }

}