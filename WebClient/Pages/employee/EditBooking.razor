@page "/EditBooking/{BookingId:long}"
@using WebClient.Models
@using WebClient.Data
@using MatBlazor
@inject ITableBookingService tableBookingService
@inject NavigationManager navigationManager
@inject NotificationService NotificationService

<h3>Editing booking No. @tableBooking.TableBookingId</h3>
<AuthorizeView Context="employeContext">
    <NotAuthorized>
        <h3>Please, login.</h3>
    </NotAuthorized>
</AuthorizeView>
<AuthorizeView Policy="Employee" Context="employeeContext">
<h4>@confirmationMessage</h4>

@if (@tableBooking == null)
{
    <em>Not found</em>
}
else
{
    <EditForm Model="@tableBooking" OnValidSubmit="Edit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group">
            Table:<br/>
            <InputNumber Min="0" Max="10" @bind-Value="@tableBooking.Table.TableId"/>
        </div>
        <div class="form-group">
            People:<br/>
            <InputNumber @bind-Value="@tableBooking.People"/>
        </div>
        <div class="form-group">
            Date:<br/>
            <MatDatePicker @bind-Value="@tableBooking.BookingDateTime" EnableTime="true" Enable24hours="true" Style="height: inherit"></MatDatePicker>
        </div>
       
         <RadzenButton type="submit" Text="Edit" Style="margin-bottom: 20px; width: 200px"
                            ButtonStyle="ButtonStyle.Info"/>
        
        
    </EditForm>
    <button class="btn btn-outline-dark" style="margin-top: 5%; margin-bottom: 5%" @onclick="Back">Back</button>
}
</AuthorizeView>
@code {
    [Parameter]
    public long BookingId { get; set; }

    private TableBooking tableBooking = new TableBooking();
    private string confirmationMessage = "";
    

    protected override async Task OnInitializedAsync()
    {
        tableBooking = await tableBookingService.GetBookingById(BookingId);
    }

    private async Task Edit()
    {
        try
        {
          await tableBookingService.UpdateTableBooking(tableBooking);
            confirmationMessage = "Booking has been successfully edited";
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = confirmationMessage, Duration = 4000 });
        }
        catch (Exception e)
        {
            confirmationMessage=e.Message;
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = confirmationMessage, Duration = 4000 });

        }
    }
    
    
    private void Back()
    {
        navigationManager.NavigateTo("/ManageBookings");
    }

}