@page "/OrderConfirmation/{OrderId:long}"
@using Microsoft.AspNetCore.Components
@using MatBlazor
@using WebClient.Data
@using WebClient.Models
@using System.Threading
@inject IOrderService OrderService
@inject NavigationManager NavigationManager

<h3>Order Confirmation</h3>

@if (order == null || order.Status.Equals("pending"))
{
    <button class="btn btn-primary" type="button" disabled>
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        Waiting for Order Confirmation...
    </button>
}
else if (order.Status.Equals("confirmed"))
{
    <p>Your order has been confirmed!</p>
    if (order.IsDelivery)
    {
        <p>You can expect to receive your order at: @order.DeliveryTime.TimeOfDay</p>
    }
    else
    {
        <p>Your order will be available for pick up at: @order.DeliveryTime.TimeOfDay</p>
    }
}

<!--
<div>

    <span class="text-nowrap">
        <a target="_blank" class="font-weight-bold link-dark" href="/OrderInformation">Back</a>
    </span>
    
    <br/>

</div>

<h3>OrderConfirmation</h3>

 <p>
            <em>Status: Order under processing.........</em>
        </p>

<br/>


<MatProgressBar Indeterminate="true" Id="MatProgressBar" Reversed="false"></MatProgressBar>

<br/>
<br/>

<div class="text-center">
    <h3 style="margin-bottom:5%">Order Item Id @OrderId</h3>
         <MatList class="text-center">
                <MatListItem>Item Name:@Name</MatListItem>
                <MatListItem>Quantity:@Quantity</MatListItem>
                <MatListItem> Price:@Price</MatListItem>
                <MatListItem>Total:@Total </MatListItem>
        </MatList>
   <div>
               <MatCheckbox @bind-Value="@checked1" Disabled="true" Label="Payed"></MatCheckbox>
           </div>
</div>
<br/>
<div>

    <span class="text-nowrap">
        <a target="_blank" class="font-weight-bold link-dark" href="/Index">Exit</a>
    </span>
</div>


-->












@code {
    
    [Parameter]
    public long OrderId { get; set; }

    private Order order;
    private OrderItem orderItems;
    private string Name;
    private decimal Price;
    private int Quantity;
    private Order Total;
    MatProgressBar progressBar;
    
    bool checked1 = true;
    
    
    protected override async Task OnInitializedAsync()
    {
        order = await OrderService.GetOrderAsync(OrderId);
    }

    private async Task CheckOrderStatus()
    {
        
    }
    private OrderItem Seed()
    {
        return orderItems;
    }
    
    public void Interrupt (MatProgressBar progressBar)
    {
        Thread.Sleep(3000);
        var threadState = ThreadState.Stopped;
        Console.WriteLine("Order is complete");
    }
    
    
    
    


}
        