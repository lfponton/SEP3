@page "/OrderInformation/{OrderId:long}"
@using WebClient.Models
@using WebClient
@inject NavigationManager NavigationManager
@using System.Net
@using System.Net.Http.Json
@using WebClient.Data
@inject IOrderItemsService OrderItemService
@using MatBlazor
@using WebClient.Data.Impl
@inject IOrderService OrderService
@using MenuItem = DataServer.Models.MenuItem


<div>

    <span class="text-nowrap">
        <a target="_blank" class="font-weight-bold link-dark" href="/TakeAway">Back</a>
    </span>

</div>


<h2>Order Information</h2>


<p>Review your order. If you want to proceed to payment press "Place Order" else go back.</p>

@if (orderItems == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table me-2">
        <thead>
        <tr>
            <th>Name: </th>
            <th>Menu Id:</th>
            <th>Quantity:</th>
            <th>Price: </th>


        </tr>
        </thead>
        <tbody>
        @foreach (var item in orderItems)
        {
            <tr>
                <td>@item.Menu.Name</td>
                <td>@item.Quantity</td>
                <td>@item.Price</td>

            </tr>
        }
        <td>
            <button @onclick="@(() => DeleteOrderItem(1))">
                <!-- Delete here should have an orderItem object as an argument. Not an id.-->
                <i class="oi oi-trash" style="color:red"/>
            </button>
        </td>
        <br/>
        <br/>

        <p>
            @*    <MatNumericUpDownField Label="Discount"
                                           @bind-Value=@testingNullableDecimal1
                                           FieldType="MatNumericUpDownFieldType.Percent"
                                           DecimalPlaces=0
                                           Minimum=null Maximum=null>
                    </MatNumericUpDownField> *@
        </p>
        <h4 class="total-to-pay" id="Total">Total to pay</h4>

        <br>
        </tbody>

    </table>

    <MatRadioGroup @bind-Value="@Val1" TValue="string">

        <MatRadioButton Value="@("f")" @onclick="() => hideAddress = true" TValue="string">Pick-up</MatRadioButton>
        <MatRadioButton Value="@("m")" @onclick="() => hideAddress = false" TValue="string">Delivery</MatRadioButton>

        <br/>

    </MatRadioGroup>

    <EditForm Model="@addNewDeliveryAddressItem" hidden="@hideAddress" OnValidSubmit="@AddNewAddress">
        <DataAnnotationsValidator/>
        <ValidationSummary/>


        <div class="d-flex justify-content-center align-self-center">
            <div class="card w-50" style=" border-right-width: 200px; border-color: whitesmoke; padding-left: 20px">
                <h4 class="card-header">Address Information</h4>
                <br/>

                <div class="form-group">
                    <label>City:</label> <br/>
                    <InputText @bind-Value="addNewDeliveryAddressItem.City"/>
                </div>
                <div class="form-group">
                    <label>Street Name:</label> <br/>
                    <InputText @bind-Value="addNewDeliveryAddressItem.StreetName"/>
                </div>
                <div class="form-group">
                    <label>Post Number</label> <br/>
                    <InputText @bind-Value="addNewDeliveryAddressItem.PostNumber"/>
                </div>
                <div class="form-group">
                    <label>Address Number</label> <br/>
                    <InputText @bind-Value="addNewDeliveryAddressItem.AddressNumber"/>
                </div>
                <div class="form-group">
                    <label>Door</label> <br/>
                    <InputText @bind-Value="addNewDeliveryAddressItem.Door"/>
                </div>

                <p class="actions">
                    <button class="btn btn-outline-dark" type="submit">Save</button>
                </p>
            </div>
        </div>
    </EditForm>

    <br/>
    <p>
        <MatSelectItem @bind-Value="@value1" Items="@value1Items"></MatSelectItem>
    </p>
    <p>
        Payment method: @value1
    </p>

    <br/>

    <div class="alert">
        <span class="oi oi-cart me-2" aria-hidden="true"></span>


        <span class="text-nowrap">
            <a target="_blank" class="font-weight-bold link-dark" href="/OrderConfirmation">Place Order</a>
        </span>
    </div>
@code {

    private IList<OrderItem> orderItems = new List<OrderItem>();
    private DeliveryAddress addNewDeliveryAddressItem = new DeliveryAddress();
    private IList<DeliveryAddress> infoOrder = new List<DeliveryAddress>();
    private OrderItem orderItem;
    private OrderItem Total;
    private int Quantity;
    private decimal Price;
    [Parameter]
    public long OrderId { get; set; }

    private DeliveryAddress DeliveryAddress = new DeliveryAddress();


    protected string Val1;
    bool hideAddress = false;

    private async void AddNewAddress()
    {
    //      await InfoService.AddInfoOrderAsync(addNewAddressItem);
        NavigationManager.NavigateTo("/infoOrder");
    }


    protected override async Task OnInitializedAsync()
    {
        orderItems = await OrderItemService.GetOrderItems(OrderId);


    // infoOrder = await InfoService.AddInfoOrderAsync();
    }

    public void getTotal(OrderItem Total)
    {
    // Total = int(Quantity * Price);
    }


    private async Task DeleteOrderItem(long orderId)
    {
        await OrderItemService.DeleteOrderItem(orderId);
    }

    decimal? testingNullableDecimal1 = 0m;
    decimal? testingNullableDecimal2 = null;
    decimal? testingNullableDecimal3 = null;
    decimal? testingNullableDecimal4 = null;
    decimal testingCurrency = 0m;

    string ButtonState = "";

    void Click(MouseEventArgs e)
    {
        ButtonState = "Clicked";
        testingNullableDecimal1 += 1;
        testingNullableDecimal2 += 100;
    }

    string value1 = "Credit card";

    string[] value1Items = new[]
    {
        "Credit card",
        "MobilPay",
        "Cash",
    };


    
    

}}