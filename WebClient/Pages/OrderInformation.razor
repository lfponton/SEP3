@page "/OrderInformation/{OrderId:long}"
@using WebClient.Models
@using WebClient
@inject NavigationManager NavigationManager
@using System.Net
@using System.Net.Http.Json
@using WebClient.Data
@inject IOrderItemsService OrderItemService
@using MatBlazor 
@using WebClient.Data.Impl


<div>

<span class="text-nowrap">
    <a target="_blank" class="font-weight-bold link-dark" href="/TakeAway">Back</a>
</span>

</div>


<h2>Order Information</h2>


<p>Review your order. If you want to proceed to payment press "Place Order" else go back.</p>

@if (orderItems == null)
{
    <p>
    <em>Loading...</em>
    </p>
}
else
{
    <table class="table me-2">
        <thead>
        <tr>
            <th>Name:</th>
            <th>Order Id:</th>
            <th>Menu Id:</th>
            <th>Quantity:</th>
            <th>Price:</th>
           
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in orderItems)
        {
            <tr>
                <td>@forecast.Order.OrderId</td>
                <td>@forecast.Menu.Name</td>
                <td>@forecast.Quantity</td>
                <td>@forecast.Price</td>
                <td>@forecast.Total </td>

            </tr>
        }
        <h4>Total to pay</h4>
        
        <br>
        </tbody>

    </table>

    <MatRadioGroup @bind-Value="@Val1" TValue="string">
        
        <MatRadioButton Value="@("f")" @onclick="() => hideAddress= true "  TValue="string">Pick-up</MatRadioButton>
        <MatRadioButton Value="@("m")" @onclick="() => hideAddress=false" TValue="string">Delivery</MatRadioButton>
        
        <br/>
       
    </MatRadioGroup>
    
    <EditForm Model="@addNewDeliveryAddressItem" hidden="@hideAddress" OnValidSubmit="@AddNewAddress">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        
       
        
        <div class="d-flex justify-content-center align-self-center">
        <div class="card w-50" style=" border-right-width: 200px; border-color: whitesmoke; padding-left: 20px" >
            <h4 class="card-header">Address Information</h4>
            <br/>
        
            <div class="form-group">
                 <label>City:</label> <br/>
                <InputText @bind-Value="addNewDeliveryAddressItem.City"/>
            </div>
            <div class="form-group">
                 <label>Street Name:</label> <br/>
                <InputText @bind-Value="addNewDeliveryAddressItem.StreetName"/>
            </div>
            <div class="form-group">
                 <label>Post Number</label> <br/>
                <InputText @bind-Value="addNewDeliveryAddressItem.PostNumber"/>
            </div>
            <div class="form-group">
                 <label>Address Number</label> <br/>
                <InputText @bind-Value="addNewDeliveryAddressItem.AddressNumber"/>
            </div>
            <div class="form-group">
                 <label>Door</label> <br/>
                <InputText @bind-Value="addNewDeliveryAddressItem.Door"/>
            </div>
        
            <p class="actions"><button class="btn btn-outline-dark" type="submit">Save</button></p>
        </div>
         </div>
    </EditForm>

    <div class="alert">
        <span class="oi oi-cart me-2" aria-hidden="true"></span>
       

        <span class="text-nowrap">
            <a target="_blank" class="font-weight-bold link-dark" href="/OrderConfirmation">Place Order</a>
        </span>
    </div>
    
    




@code {

    private IList<OrderItem> orderItems = new List<OrderItem>();
    private DeliveryAddress addNewDeliveryAddressItem = new DeliveryAddress();
    private IList<DeliveryAddress> infoOrder = new List<DeliveryAddress>();
    private OrderItem orderItem = new OrderItem();
    
    
    
    private DeliveryAddress DeliveryAddress = new DeliveryAddress();
    
   
    protected string Val1;
    bool hideAddress = false;

    private async void AddNewAddress()
    {
  //      await InfoService.AddInfoOrderAsync(addNewAddressItem);
        NavigationManager.NavigateTo("/infoOrder");
    }

    

        protected override async Task OnInitializedAsync()
    {
        orderItems = await OrderItemService.GetOrderItems(OrderId);
    // infoOrder = await InfoService.AddInfoOrderAsync();


    }
    // Demonstrates how a parent component can supply parameters


    [Parameter]
    public long OrderId { get; set; }


    protected override void OnParametersSet()
    {

        OrderId = OrderId;
   
    }

}
}