@page "/AllBookings"
@using WebClient.Models
@using WebClient.Data
@inject NavigationManager navigationManager
@inject ITableBookingService tableBookingService
@using MatBlazor

<h3>All Bookings</h3>


@if (tableBookings == null)
{
    <button class="btn btn-primary" type="button" disabled>
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        Loading...
    </button>
}
else
{
    <EditForm Model="@filterDate" OnSubmit="FilterBookings">
         <div class="form-group">
             <MatDatePicker @bind-Value="@filterDate"  Style="height: inherit"></MatDatePicker>
             <button class="btn btn-outline-dark" type="submit">Filter by day</button>
             </div>
    </EditForm>
    <table class="table me-2">
        <thead>
        <tr>
            <th>Id</th>
            <th>Date</th>
            <th>People</th>
            <th>Table</th>
            <th>Customer</th>
            <th>Description</th>

        </tr>
        </thead>
        <tbody>
        @if (tableBookingsDisplay.Count.Equals(0))
        {
            <b>Thes is no bookings for the specified date</b>   
        }
        @foreach (var booking in tableBookingsDisplay)
        {
            <tr>
                <td>@booking.TableBookingId</td>
                <td>@booking.BookingDateTime</td>
                <td>@booking.People</td>
                <td>@booking.Table.TableId</td>
                <td>
                    @if (@booking.Customer != null)
                    {
                        @booking.Customer.FirstName
                        @booking.Customer.LastName
                    }

                </td>
                <td>@booking.Description</td>
            </tr>
            <br>

        }
        </tbody>
        
            </table>

@code {
    private List<TableBooking> tableBookings = new List<TableBooking>();
    private List<TableBooking> tableBookingsDisplay = new List<TableBooking>();
     private DateTime selectedDate = DateTime.Today;
     private DateTime filterDate = DateTime.Today;
    
    protected override async Task OnInitializedAsync()
    {
        tableBookings = await tableBookingService.GetBookings(selectedDate);
        tableBookingsDisplay = tableBookings;
    }

    private async Task FilterBookings()
    {
        filterDate = filterDate.AddDays(1).ToLocalTime();
        tableBookingsDisplay = await tableBookingService.GetBookings(filterDate);
        tableBookingsDisplay = tableBookingsDisplay.Where(tb => tb.BookingDateTime == filterDate).ToList();
    }

}
}