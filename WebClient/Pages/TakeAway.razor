@page "/TakeAway"
@using WebClient.Models
@using WebClient.Data
@using System.Linq
@inject IMenusService MenusService;
@inject IMenuItemsService MenuItemsWebService;
@inject IMenuItemsSelectionsService MenuItemsSelectionsService
@inject IOrderItemsService OrderItemsService;
@inject IOrderService OrderService;
@inject NavigationManager NavigationManager;
@inject IAccountService AccountService
@inject NotificationService NotificationService

<div class="text-center">
    <h3>TakeAway</h3>
    <AuthorizeView Policy="Customer">
        <Authorized>
            <h3>Hello @context.User.Identity.Name</h3>
            <div class="d-flex justify-content-center align-items-center">
                <RadzenCard Style="margin-bottom: 2%; height:15%;">
                    <b>Current Order Price: @price DKK</b>
                </RadzenCard>
            </div>
            @if (menus == null)
            {
                <p>No menus to show.</p>
            }
            else if (!menus.Any())
            {
                <button class="btn btn-primary" type="button" disabled>
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    Loading...
                </button>
            }
            else
            {
                customerEmail = context.User.Claims.First(claim => claim.Type.Equals("Email")).Value;

                @foreach (var menu in menus)
                {
                    <RadzenCard Style="margin-bottom: 2%; height:15%;">
                        <div class="row">
                            <div class="col-md-6">
                                <b>@menu.Name</b>
                                <div style="margin-top:1%">Menu Items:</div>
                                @foreach (var selection in menu.MenusItemsSelections)
                                {
                                    <p>@selection.MenuItem.Name x @selection.Quantity</p>
                                }
                                <br/>
                                <b>Description</b>
                                <p style="margin-top:1%">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. </p>
                            </div>
                            <div class="col-md-6">
                                <div>Type:</div>
                                <b>@menu.Type</b>
                                <div style="margin-top:1%">Price:</div>
                                <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", menu.Price)</b>
                                <div style="margin-top:1%">Quantity: </div>
                                <RadzenNumeric Style="width: 25%" TValue="int" Change=@(args => OnSelectQuantity(args))></RadzenNumeric>
                                <br/>

                                <RadzenButton Text="Add to Order" Style="margin-top:1%; width: 200px"
                                              ButtonStyle="ButtonStyle.Info"
                                              Click=@(args => ShowNotification(new NotificationMessage {Severity = NotificationSeverity.Info, Summary = "Added to the order", Duration = 4000}, menu))>
                                </RadzenButton>

                            </div>
                        </div>
                    </RadzenCard>
                }
                <div class="d-flex justify-content-center align-items-center">
                    <RadzenCard Style="margin-bottom: 2%; height:15%;">
                        <b>Current Order Price: @price DKK</b>
                    </RadzenCard>
                </div>
                <div class="text-center">
                    <button class="btn btn-outline-dark" style="margin-top: 2%; margin-bottom: 5%" @onclick="Next">Proceed to Payment</button>
                </div>
            }
        </Authorized>
    </AuthorizeView>
</div>


@code {
    private IList<Menu> menus = new List<Menu>();
    private IList<long> selectedMenusIds = new List<long>();
    private IList<OrderItem> orderItems = new List<OrderItem>();
    private Order order;
    private int quantity;
    private decimal price;
    private string customerEmail;

    protected override async Task OnInitializedAsync()
    {
        order = new Order
        {
        };
        menus = await MenusService.GetMenus();

        foreach (var m in menus)
        {
            m.MenusItemsSelections = await MenuItemsSelectionsService.GetMenuItemsSelections(m.MenuId);
        }
    }

    private void OnSelectQuantity(dynamic value)
    {
        quantity = value;
    }

    private void ShowNotification(NotificationMessage message, Menu menu)
    {
        AddOrderItem(menu);
        NotificationService.Notify(message);
    }

    private void AddOrderItem(Menu menu)
    {
        if (!selectedMenusIds.Contains(menu.MenuId))
        {
            OrderItem orderItem = new OrderItem
            {
                MenuId = menu.MenuId,
                Menu = menu,
                Quantity = quantity
            };
            price += orderItem.Menu.Price * orderItem.Quantity;
            orderItems.Add(orderItem);
            order.OrderItems = orderItems;
            selectedMenusIds.Add(menu.MenuId);
        }
        else
        {
            OrderItem item = order.OrderItems.First(item => item.MenuId == menu.MenuId);
            price -= item.Quantity * menu.Price;
            price += quantity * menu.Price;
            order.OrderItems.Remove(item);
            item.Quantity = quantity;
            order.OrderItems.Add(item);
        }
    }

    private async Task Next()
    {
        if (order.OrderItems.Any())
        {
            order.Customer = new Customer {Email = customerEmail};
            order.OrderDateTime = DateTime.Now;
            order.Price = price;
            order.Status = "ordering";
            order.IsDelivery = true;
            order = await OrderService.CreateOrder(order);
            NavigationManager.NavigateTo($"/OrderInformation/{order.OrderId}");
        }
    }


}