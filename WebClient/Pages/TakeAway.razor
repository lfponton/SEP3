@page "/TakeAway"
@using WebClient.Models
@using WebClient.Data
@inject IMenusPersistence MenusPersistence;
@inject IMenuItemsService MenuItemsWebService;
@inject IMenuItemsSelectionsService MenuItemsSelectionsService
@inject IOrderItemsService OrderItemsService;
@inject IOrderService OrderService;
@inject NavigationManager NavigationManager;

<h3>TakeAway</h3>

@if (menus == null)
{
    <p>
        <em>Loading menus...</em>
    </p>
}
else if (!menus.Any())
{
    <p>
        <em>No menus to show.</em>
    </p>
}
else
{
    <div class="pre-scrollable">
        @foreach (var menu in menus)
        {
            <RadzenCard Style="width:80%; margin-bottom: 2em; height:15%;">
                <div class="row">
                    <div class="col-md-6">
                        <b>@menu.Name</b>
                        <div style="margin-top:20px">Menu Items:</div>
                        @foreach (var selection in menu.MenusItemsSelections)
                            {
                                <p>@selection.MenuItem.Name x @selection.Quantity</p>
                            }
                        <br/>
                    </div>
                    <div class="col-md-6">
                        <div>Type:</div>
                        <b>@menu.Type</b>
                        <div style="margin-top:20px">Price:</div>
                        <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", menu.Price)</b>
                        <div style="margin-top:20px">Quantity: </div>
                        <RadzenNumeric Style="width: 25%" TValue="int" Change=@(args => OnSelectQuantity(args))></RadzenNumeric>
                        <br/>
                        <RadzenButton Click=@(() => OnAddOrderItem(menu.MenuId)) Text="Add to Order" Style="margin-top: 2em; width: 40%"/>
                    </div>
                </div>
            </RadzenCard>
        }
    </div>

    <RadzenButton Click=@(() => Next()) Text="Proceed to Payment" Style="margin-top: 2em; width: 40%"/>
}



@code {
    private IList<Menu> menus = new List<Menu>();
    private IList<OrderItem> orderItems = new List<OrderItem>();
    private Order order = new Order();
    private int quantity;

    protected override async Task OnInitializedAsync()
    {
        // TODO: We need to get the customer from the login
        var customer = new Customer
        {
            Email = "hello@gmail.com",
            FirstName = "Bill",
            LastName = "Smith",
            Password = "4321",
        };
        order = new Order
        {
            Customer = customer
        };
        menus = await MenusPersistence.GetMenus();
        
        foreach (var m in menus)
        {
            m.MenusItemsSelections = await MenuItemsSelectionsService.GetMenuItemsSelections(m.MenuId);
        }
    }
    
    private void OnSelectQuantity(dynamic value)
    {
        quantity = value;
    }

    private async Task OnAddOrderItem(long menuId)
    {
        // TODO: To avoid having more orderItems created when the quantity of a Menu is changed, then check if the menuId already exists in an orderItem and if so update it.
        Menu menu = menus.FirstOrDefault(m => m.MenuId == menuId);
        OrderItem orderItem = new OrderItem
        {
            MenuId = menuId,
            Menu = menu,
            Quantity = quantity
        };
        orderItems.Add(orderItem);
        order.OrderItems = orderItems;
    }


    private async Task Next()
    {
        if (order.OrderItems.Any())
        {
            order.OrderDateTime = DateTime.Now;
            order = await OrderService.CreateOrder(order);
            NavigationManager.NavigateTo($"/OrderInformation/{order.OrderId}");
        }
    }

}