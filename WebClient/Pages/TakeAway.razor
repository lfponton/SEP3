@page "/TakeAway"
@using WebClient.Models
@using WebClient.Data
@inject IMenusPersistence MenusPersistence;
@inject IMenuItemsService MenuItemsWebService;
@inject IOrderItemsService OrderItemsService;
@inject IOrderService OrderService;
@inject NavigationManager NavigationManager;

<h3>TakeAway</h3>

@if (menus == null)
{
    <p>
        <em>Loading orders - something went worng</em>
    </p>
}
else if (!menus.Any())
{
    <p>
        <em>No menus to show.</em>
    </p>
}
else
{
    <div class="pre-scrollable">
        @foreach (var menu in menus)
        {
            <RadzenCard Style="width:80%; margin-bottom: 2em; height:15%;">
                <div class="row">
                    <div class="col-md-6">
                        <b>@menu.Name</b>
                        <div style="margin-top:20px">Description:</div>
                        <b>
                            @foreach (var menuItem in menu.MenuItems)
                            {
                                @menuItem.Name;
                            }
                        </b>
                        <br/>
                    </div>
                    <div class="col-md-6">
                        <div>Type:</div>
                        <b>@menu.Type</b>
                        <div style="margin-top:20px">Price:</div>
                        <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", menu.Price)</b>
                        <div style="margin-top:20px">Order: </div>
                        <RadzenNumeric Style="width: 25%" TValue="int" Change=@(args => OnSelectQuantity(args))></RadzenNumeric>
                        <br/>
                        <RadzenButton Click=@(() => OnAddOrderItem(@menu.MenuId)) Text="Add to Order" Style="margin-top: 2em; width: 40%"/>
                    </div>
                </div>
            </RadzenCard>
        }
    </div>
    
    <table class="table">
        <thead>
        <tr>
            <th>Number Of items</th>
            <th>Menu</th>
            <th>Price</th>
            <th>Delete</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in orderItems)
        {
            <tr>
                <td>@item.Quantity</td>
                <td>
                    @*@item.Menu.Name*@
                    @item.OrderItemId
                </td>
                <td></td>
                <td>
                    <button @onclick="@(() => DeleteOrderItem(@item.OrderItemId))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
    <button  @onclick="@(() => Next())">Place Order</button>
}




@code {
    private IList<Menu> menus = new List<Menu>();
    private IList<OrderItem> orderItems = new List<OrderItem>();
    private Order cacheOrder = new Order();
    private int quantity;

    protected override async Task OnInitializedAsync()
    {
        cacheOrder = await OrderService.CreateOrder();
        menus = await MenusPersistence.GetMenus();
        foreach (var m in menus)
        {
            m.MenuItems = await MenuItemsWebService.GetMenuItems(m.MenuId);
        }
    }
    
    private void OnSelectQuantity(dynamic value)
    {
        quantity = value;
    }

    private async Task OnAddOrderItem(long menuId)
    {
        Menu menu = menus.FirstOrDefault(m => m.MenuId == menuId);
         await OrderItemsService.CreateOrderItem(quantity, menu, cacheOrder);
        orderItems = await OrderItemsService.GetOrderItems(cacheOrder.OrderId);
    }

    private async Task DeleteOrderItem(long orderItemId)
    {
        await OrderItemsService.DeleteOrderItem(orderItemId);
        orderItems = await OrderItemsService.GetOrderItems(cacheOrder.OrderId);

        
    }

  

    private void Next()
    { 
        NavigationManager.NavigateTo($"/OrderInformation/{cacheOrder.OrderId}");
    }

}